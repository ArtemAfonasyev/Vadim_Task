#########################################################################
#                              IMPORTS                                  #
#########################################################################

import gspread
import asyncio
import discord  # –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
import random
import re  # —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
from discord.ext import commands, tasks  # –∫–æ–º–∞–Ω–¥—ã
from discord import Option
from datetime import datetime, timedelta
import json  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å json
from src import text_file, links  # –Ω—É–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
from src import feedback_v2
import test

#########################################################################
#                              SETTINGS                                 #
#########################################################################

config = json.load(open('config/config.json', 'r'))
bot = commands.Bot(config['prefix'], intents=discord.Intents.all())

#########################################################################
#                              LINKS                                    #
#########################################################################

icon_rts = links.LINKS[5]["icon_rts"]
readme = links.LINKS[6]["readme"]
TEST_LESSONS = links.TEST_LESSONS
REG_LESSONS = links.REG_LESSONS
LINKS = links.LINKS

#########################################################################
#                              TEXT                                     #
#########################################################################

EMBED_FOOTER = text_file.EMBED_FOOTER

@bot.slash_command(name="alarm_lessons", description="–ü–æ–∏—Å–∫ –∑–∞–º–µ–Ω—ã —É—Ä–æ–∫—É –ø–æ —Ä–æ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ alarm_lessons")
async def alarm_lessons(interaction: discord.Interaction,
                        role: Option(discord.Role, description="–†–æ–ª—å –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —É—Ä–æ–∫", required=True,
                                     name="—Ä–æ–ª—å"),
                        date: Option(str, description="–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞ (dd.mm)", required=True, name="–¥–∞—Ç–∞"),
                        time: Option(str, description="–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞ (dd.mm)", required=True, name="–≤—Ä–µ–º—è"),
                        language: Option(str, description="RU/ENG/UKR/–¥—Ä—É–≥–æ–π —è–∑—ã–∫", required=True,
                                         choices=["RU", "ENG", "UKR", "–¥—Ä—É–≥–æ–π —è–∑—ã–∫"], name="—è–∑—ã–∫-—É—Ä–æ–∫–∞"),
                        type_lessons: Option(str, description="–†–µ–≥—É–ª—è—Ä–Ω—ã–π/–ü—Ä–æ–±–Ω—ã–π", required=True,
                                             choices=["–†–µ–≥ - –ò–ù–î25","–†–µ–≥ - –ò–ù–î50", "–†–µ–≥ - –ò–ù–î80", "–†–µ–≥ - –ì–†–£–ü–ü–ê", "–†–µ–≥ - GrPRO", "–ü–£",
                                                      "–ì–ü–£"], name="—Ç–∏–ø-—É—Ä–æ–∫–∞"),
                        add_info: Option(str, description="–õ—é–±–∞—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", required=True, name="–¥–æ–ø-–∏–Ω—Ñ–æ"),
                        link: Option(str, description="–°—Å—ã–ª–∫–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (teacher/company –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è)",
                                     required=True, name="—Å—Å—ã–ª–∫–∞-–∞–ª—å—Ñ–∞")):
    interaction.response.defer()
    if not_dm_message(interaction):
        embed = discord.Embed(
            title="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ï–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ alarm_lessons",
            color=discord.Color.blue())
        embed.set_footer(text=random.choice(EMBED_FOOTER), icon_url=icon_rts)
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    date_pattern = re.compile(r'\d{2}\.\d{2}$')
    time_pattern = re.compile(r'\d{2}:\d{2}$')

    if not date_pattern.match(date):
        await interaction.response.send_message("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dd.mm", ephemeral=True)
        return

    if not time_pattern.match(time):
        await interaction.response.send_message("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hh:mm", ephemeral=True)
        return

    if language.lower() != "ru" and language.lower() != "eng" and language.lower() != "ukr" and language.lower() != "–¥—Ä—É–≥–æ–π —è–∑—ã–∫":
        await interaction.response.send_message(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RU (ru), ENG (eng), UKR (ukr) –∏–ª–∏ ETC (etc)", ephemeral=True)
        return

    await interaction.response.send_message("‚úÖ", ephemeral=True)
    user = interaction.user
    embed = discord.Embed(title="üÖ∞Ô∏è ALARM LESSON", color=discord.Color.orange())

    if language.lower() == "eng":
        sdt_label = "Subject/Date/Time:"
        type_label = "Type lesson:"
        language_label = "Language:"
        link_label = "Link:"
        addInf_label = "Additional Information:"
        text = f'{role.mention} {interaction.user.mention} waiting for your responses in this thread!'
    else:
        sdt_label = "–ü—Ä–µ–¥–º–µ—Ç/–î–∞—Ç–∞/–í—Ä–µ–º—è:"
        type_label = "–¢–∏–ø —É—Ä–æ–∫–∞:"
        language_label = "–Ø–∑—ã–∫ —É—Ä–æ–∫–∞:"
        link_label = "–°—Å—ã–ª–∫–∞:"
        addInf_label = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
        text = f'{role.mention} {interaction.user.mention} –∂–¥–µ–º –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≤–µ—Ç–∫–µ!'

    embed.add_field(name=sdt_label, value=f"{role.mention} / {date} / {time}")
    embed.add_field(name=type_label, value=f"{type_lessons}")
    embed.add_field(name=language_label, value=f"{language}")
    embed.add_field(name=addInf_label, value=f"{add_info}")
    embed.add_field(name=link_label, value=f"{link}".replace("https://rtschool.s20.online/company",
                                                             "https://rtschool.s20.online/teacher"))

    message = await interaction.channel.send(embed=embed)

    new_thread = await interaction.channel.create_thread(name=f"{role.name} {date} {time}", message=message,
                                                         type=discord.ChannelType.public_thread)

    await new_thread.send(text)

    message_link = f"https://discord.com/channels/{interaction.guild.id}/{new_thread.id}/{message.id}"
    
    print(2)
    
    gc = gspread.service_account(filename=r'/home/gs_bot_token.json')
    sh = gc.open("Alarm Lessons")
    worksheet = sh.worksheet("Analytics")
    
    worksheet.append_row(
        [str(message_link), str(date), str(time), str(role.name), str(type_lessons), str(language), str(link)])

    for member in role.members:
        try:
            if language.lower() == "eng":
                new_embed = modify_embed_field(embed, "Subject/Date/Time:", f"{role.name} / {date} / {time}")
                new_embed.add_field(name="Link to message:", value=message_link)
            else:
                new_embed = modify_embed_field(embed, "–ü—Ä–µ–¥–º–µ—Ç/–î–∞—Ç–∞/–í—Ä–µ–º—è:", f"{role.name} / {date} / {time}")
                new_embed.add_field(name="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:", value=message_link)
            await member.send(embed=new_embed)
            await asyncio.sleep(20)  # –ü–∞—É–∑–∞ –≤ 20 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            await user.send(f"‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name}: {str(e)}")

    await user.send("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")


@bot.slash_command(name="set_teacher", description="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ–¥–∞–≥–æ–≥–∞ alarm —É—Ä–æ–∫–∞")
async def set_teacher(interaction: discord.Interaction,
                      link: Option(str, description="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –ø–µ–¥–∞–≥–æ–≥–∞", required=True)):
    
    # interaction.response.defer()
    if not_dm_message(interaction):
        embed = discord.Embed(
            title="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ï–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ alarm_lessons",
            color=discord.Color.blue())
        embed.set_footer(text=random.choice(EMBED_FOOTER), icon_url=icon_rts)
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    gc = gspread.service_account(filename=r'/home/gs_bot_token.json')
    sh = gc.open("Alarm Lessons")
    worksheet = sh.worksheet("Analytics")
    print(0)
    all_values = worksheet.col_values(1)
    print(all_values)
    new_link = '/'.join(link.split('/')[:-1])
    # –ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–∏—Å—Ç–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
    row_number = None
    print(new_link)
    for index, row in enumerate(all_values, start=1):
        if new_link in row:
            row_number = index
            break
    print('ROW NUMBER!',row_number)
    parts = link.split("/")
    print(parts)
    if row_number != None:
        guild_id = int(parts[4])
        thread_id = int(parts[5])

        message_id = int(parts[6])
        guild = bot.get_guild(guild_id)
        thread = guild.get_thread(thread_id)
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID
        print(guild,thread)
        message = await thread.fetch_message(int(message_id))
        user = message.author
        await interaction.response.send_message(f"‚úÖ –ü–µ–¥–∞–≥–æ–≥ {user} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω. –ù–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ AlfaCRM!\n–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Å—ã–ª–∫–∞:{link}",
                                                ephemeral=False)
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä (guild) –∏ –∫–∞–Ω–∞–ª

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        if guild is not None:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (message)

            if thread:
                message = await thread.fetch_message(message_id)
                if message:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    row_data = worksheet.row_values(row_number)
                    author_name = message.author.name
                    print(author_name)
                    date = row_data[1]
                    time = row_data[2]
                    date_str1 = f"{date} {time}"  # data_str1
                    message_time = message.created_at.strftime("%d.%m %H:%M")  # data_str2
                    message_time_gs = moskow_time(message_time)
                    print(message_time,date_str1)
                    time_difference_var = time_difference(date_str1, message_time)
                    worksheet.update_cell(row_number, 8, message_time_gs)  # –í—Ä–µ–º—è
                    worksheet.update_cell(row_number, 9, author_name)  # –ò–º—è
                    worksheet.update_cell(row_number, 10, str(time_difference_var))  # —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    else:
        print('‚ùå C—Å—ã–ª–∫–∞ {')
        await interaction.response.send_message(f"‚ùå C—Å—ã–ª–∫–∞ {link} –Ω–µ–≤–µ—Ä–Ω–∞—è!\nC–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ–¥–∞–≥–æ–≥–∞ –≤ –≤–µ—Ç–∫–µ",
                                                ephemeral=False)




bot.run('token')

